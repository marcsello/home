#!/bin/bash

# Config... thing
sources=("https://github.com/marcsello.keys" "https://gitlab.com/marcsello.keys")


function download {

	if command -v curl >/dev/null 2>&1; then

		curl -s -m 60 --fail --fail-early -o "$2" "$1"
		return $?

	elif command -v wget >/dev/null 2>&1; then

		wget -T 60 -q -O "$2" "$1"
		return $?

	elif command -v python3 >/dev/null 2>&1; then

		python3 - "$1" "$2" << __EOF__
import sys, urllib.request
urllib.request.urlretrieve(sys.argv[1], sys.argv[2])
__EOF__
		return $?

	else
		echo "Nothing to download with!"
		exit 2
	fi

}

function sshdirFromUsername {
	[[ -z "$1" ]] && return

	if [[ "$1" == "root" ]]; then # This might not be the safest bet
		echo "/root/.ssh"
	else
		echo "/home/$1/.ssh"
	fi
}

# First, try to figure out sshdir from either the env or the cli arg
if [[ -n "$1" ]]; then
	SSHDIR="$1"
fi

# autodetect if not set
if [[ -z "$SSHDIR" ]]; then
	if [[ -n "$HOME" ]]; then
		SSHDIR="$HOME/.ssh"
	elif [[ -n "$USER" ]]; then
		SSHDIR=$(sshdirFromUsername "$USER")
	elif [[ -n "$LOGNAME" ]]; then
		SSHDIR=$(sshdirFromUsername "$LOGNAME")
	else
		SSHDIR=$(sshdirFromUsername $(whoami))
	fi
fi

# fail if still not found
if [[ -z "$SSHDIR" ]]; then
	echo "Could not determine the user's ssh directory"
	echo "Please provide it as the first commandline argument"
	exit 1
fi

# Ensure that this dir exists, and accessible

mkdir -p "$SSHDIR" || exit 2 # make sure the .ssh folder exists

if [[ ! -d "$SSHDIR" ]]; then
	echo "User's local SSH directory ($SSHDIR) does not exists, and it could not be created!"
	exit 3
fi

# And now... the main act...

authorized_keys="$SSHDIR/authorized_keys"
tmpfile=$(mktemp -p "$SSHDIR" keysXXXXXXXX)

# Set hook to always clear tmpfile, and restore backup if the authorized_keys file is broken
function cleanup() {
	rm -f "${tmpfile}"

	# In case anything goes wrong, at any point, try to restore the backup
	if ! ssh-keygen -lf "${authorized_keys}" >/dev/null; then
		cp "${authorized_keys}.old" "${authorized_keys}" || echo "Could not restore backup!!"
	fi
}

trap cleanup EXIT

# Try to download a valid keys file
download_success="0"
for source in "${sources[@]}"; do

	echo "Trying ${source}..."
	download "${source}" "${tmpfile}" || continue

	if ssh-keygen -lf "${tmpfile}" >/dev/null; then
		echo "Downloaded keys are valid..."
		download_success="1"
		break # success
	else
		echo "Downloaded keys are invalid!"
	fi

done

# exit on failure
if [[ "$download_success" -ne "1" ]]; then
	echo "Could not download public keys!"
	exit 4
fi

# create a backup
cp "${authorized_keys}" "${authorized_keys}.old"

# Compile authorized_keys file
(
	echo "# Synchronized keys:"
	cat "${tmpfile}"
	if [[ -f "${authorized_keys}.local" ]]; then
		echo "# Locally added keys:"
		cat "${authorized_keys}.local"
	fi

) > "${authorized_keys}"

# Ensure correct permissions
chmod 600 "$authorized_keys"
echo "Done!"
